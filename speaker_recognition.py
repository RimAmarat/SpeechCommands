# -*- coding: utf-8 -*-
"""speaker_recognition(3).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1J6dEkj9uqk2BzF41x-NVRPf0APYgW60C
"""

from torchaudio.datasets import SPEECHCOMMANDS
import os

import torch
from torch import nn, optim
import torch.nn.functional as F
import torchaudio
from tqdm import tqdm

import matplotlib.pyplot as plt

class SpeechSubset(SPEECHCOMMANDS):
    def __init__(self, subset, str=None):
        super().__init__("./", download=True)

        def load_list(filename):
            filepath = os.path.join(self._path, filename)
            with open(filepath) as fileob:
                return [os.path.join(self._path, line.strip()) for line in fileob]

        if subset == "validation":
            self._walker = load_list("validation_list.txt")
        elif subset == "testing":
            self._walker = load_list("testing_list.txt")
        elif subset == "training":
            excludes = load_list("validation_list.txt") + load_list("testing_list.txt")
            excludes = set(excludes)
            self._walker = [w for w in self._walker if w not in excludes]

train_set = SpeechSubset("training")
test_set = SpeechSubset("testing")

waveform, sample_rate, label, speaker_id, utterance_number = train_set[0]

print("waveform         -->", waveform, "\nsample_rate      -->", sample_rate, "\nlabel            -->", label, "\nspeaker_id       -->", speaker_id, "\nutterance_number -->", utterance_number)

# This is what the waveform looks like
plt.plot(waveform.t().numpy())
plt.title("Plot of the waveform")

# Lets display all the labels that the commands can be classified into
labels = sorted(list(set(datapoint[2] for datapoint in train_set)))
print(labels)

# We will make some preprocessing functions to help preprocess the data
def label_to_index(word):
  return torch.tensor(labels.index(word))

def index_to_label(index):
  return labels[index]

def pad_sequence(batch):
  batch = [item.t() for item in batch]
  batch = torch.nn.utils.rnn.pad_sequence(batch, batch_first=True,
                                          padding_value=0.)
  return batch.permute(0, 2, 1)

# Processes the batch that'll be returned by the data loader
def collate_fn(batch):
  # For the dataloader that we will need for training
  # For all tensors in the batch
  tensors, targets = [], []
  for waveform, _, label, *_ in batch:
    # get waveform tensors
    tensors += [waveform]
    # encode targets (label_to_index)
    targets += [label_to_index(label)]

  # pad waveform tensors
  tensors = pad_sequence(tensors)
  # concatenate target tensors
  targets = torch.stack(targets)

  return tensors, targets

batch_size = 256

import IPython.display as ipd
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(device)

if device == 'cuda':
  num_workers = 1
  pin_memory = True
else:
  num_workers = 0
  pin_memory = False

train_loader = torch.utils.data.DataLoader(
    train_set,
    batch_size = batch_size,
    shuffle=True,
    collate_fn = collate_fn,
    num_workers = num_workers,
    pin_memory = pin_memory
)

test_loader = torch.utils.data.DataLoader(
    test_set,
    batch_size = batch_size,
    shuffle=False,
    drop_last = False,
    collate_fn = collate_fn,
    num_workers = num_workers,
    pin_memory = pin_memory
)

# CNN with batch normalization
class M5(nn.Module):
  def __init__(self, n_input=1, n_output=35, stride=16, n_channel=32):
    super().__init__()
    self.conv1 = nn.Conv1d(n_input, n_channel, kernel_size=80, stride=stride)
    self.bn1 = nn.BatchNorm1d(n_channel)
    self.pool1 = nn.MaxPool1d(4)

    self.conv2 = nn.Conv1d(n_channel, n_channel, kernel_size=3)
    self.bn2 = nn.BatchNorm1d(n_channel)
    self.pool2 = nn.MaxPool1d(4)

    self.conv3 = nn.Conv1d(n_channel, 2*n_channel, kernel_size=3)
    self.bn3 = nn.BatchNorm1d(2*n_channel)
    self.pool3 = nn.MaxPool1d(4)

    self.conv4 = nn.Conv1d(2*n_channel, 2*n_channel, kernel_size=7, stride=stride)
    self.bn4 = nn.BatchNorm1d(2*n_channel)
    self.pool4 = nn.MaxPool1d(4)

    self.fc1 = nn.Linear(2*n_channel, n_output)

  def forward(self, x):
    x = self.conv1(x)
    x = F.relu(self.bn1(x))
    x = self.pool1(x)

    x = self.conv2(x)
    x = F.relu(self.bn2(x))
    x = self.pool2(x)

    x = self.conv3(x)
    x = F.relu(self.bn3(x))
    x = self.pool3(x)

    x = self.conv4(x)
    x = F.relu(self.bn4(x))
    #x = self.pool4(x)
    x = F.avg_pool1d(x, x.shape[-1])
    x = x.permute(0, 2, 1)
    x = self.fc1(x)
    return F.log_softmax(x, dim=2)

# input_size
new_sample_rate = 8000
# https://dspguru.com/dsp/faqs/multirate/resampling/
transform = torchaudio.transforms.Resample(orig_freq=sample_rate, new_freq=new_sample_rate)
transformed = transform(waveform)

transformed.shape

model = M5(n_input = transformed.shape[0], n_output=len(labels))
model.to(device)

def count_params(model):
  return sum(p.numel() for p in model.parameters() if p.requires_grad)

count_params(model)

optimizer = optim.Adam(model.parameters(), lr=0.001, weight_decay=0.0001)
scheduler = optim.lr_scheduler.StepLR(optimizer, step_size=20, gamma=0.1)

def train(model, epoch, log_interval):
    model.train()
    for batch_idx, (data, target) in enumerate(train_loader):

        data = data.to(device)
        target = target.to(device)
        data = transform(data)
        output = model(data)
        loss = F.nll_loss(output.squeeze(), target)

        optimizer.zero_grad()
        loss.backward()
        optimizer.step()

        if batch_idx % log_interval == 0:
            print(f"Train Epoch: {epoch} [{batch_idx * len(data)}/{len(train_loader.dataset)} ({100. * batch_idx / len(train_loader):.0f}%)]\tLoss: {loss.item():.6f}")

        pbar.update(pbar_update)
        losses.append(loss.item())

def number_of_correct(pred, target):
    return pred.squeeze().eq(target).sum().item()


def get_likely_index(tensor):
    return tensor.argmax(dim=-1)


def test(model, epoch):
    model.eval()
    correct = 0
    for data, target in test_loader:

        data = data.to(device)
        target = target.to(device)

        data = transform(data)
        output = model(data)

        pred = get_likely_index(output)
        # if pred != target
        print("num of correct", number_of_correct(pred, target))
        correct += number_of_correct(pred, target)

        pbar.update(pbar_update)

    print(f"\nTest Epoch: {epoch}\tAccuracy: {correct}/{len(test_loader.dataset)} ({100. * correct / len(test_loader.dataset):.0f}%)\n")

log_interval = 20
n_epoch = 2

pbar_update = 1 / (len(train_loader) + len(test_loader))
losses = []

transform = transform.to(device)
with tqdm(total=n_epoch) as pbar:
    for epoch in range(1, n_epoch + 1):
        train(model, epoch, log_interval)
        test(model, epoch)
        scheduler.step()

def predict(tensor):
    tensor = tensor.to(device)
    tensor = transform(tensor)
    tensor = model(tensor.unsqueeze(0))
    tensor = get_likely_index(tensor)
    tensor = index_to_label(tensor.squeeze())
    return tensor

print(test_set[3])
print(train_set[0])

for i in range(1, 1000, 50):
    print(i)
    try:
        waveform, sample_rate, utterance, *_ = test_set[i]
        ipd.Audio(waveform.numpy(), rate=sample_rate)
        print(f"Expected: {utterance}. Predicted: {predict(waveform)}.")
    except:
        continue